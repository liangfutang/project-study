# info表示日志级别,大小写没关系。
# stdout, a1，a2: 把logger和具体的appender 关联起来
log4j.rootLogger = TRACE,stdout

# 配置控制台的appender, stdout:是appender的名字，随便起
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.target = System.out
log4j.appender.stdout.threshold = TRACE
log4j.appender.stdout.layout =org.apache.log4j.PatternLayout
# d:date %-5p:日志级别 ％20c:全类名 %L:第几行 ％m:要打印的message
log4j.appender.stdout.layout.conversionPattern = %d{yyyy-MM-dd ss} %-5p %20c %L:%m %n

# 输出到文件的appender,而且每天一个文件，缺点：不会自动消除日志文件
log4j.appender.a1 = org.apache.log4j.DailyRollingFileAppender
# 这里的目录不需要提前创建
log4j.appender.a1.file = ${user.home}/log-demo/log4j/f1.log
log4j.appender.a1.threshold = INFO
log4j.appender.a1.layout = org.apache.log4j.PatternLayout
# d:date %-5p:日志级别 %20c:全类名 %L:第几行 %m:要打印的message
log4j.appender.a1.layout.conversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %20c %L:%m %n

# 配置文件appender,输出到文件.可以指定单个文件最大的式size以及保留名少个日志文件
log4j.appender.a2 =org.apache.log4j.RollingFileAppender
log4j.appender.a2.file = ${user.home}/log-demo/log4j/a2.log
log4j.appender.a2.maxFileSize = 100MB
log4j.appender.a2.maxBackupIndex = 7
log4j.appender.a2.threshold = INFO
log4j.appender.a2.layout = org.apache.log4j.PatternLayout
# d:date %-5p:日志级别 %20c:全类名 %L:第几行 ％m:要打印的message
log4j.appender.a2.layout.conversionPattern = %d{yyyy-MM-dd HH:mm:ss) %-5p %20c %L:%m %n

# 此时因为继承了rootlogger就会在stdout输出,然后a1是自己配置的也会输出，，没有a2所以a2不会输出
# 此处自定义的log配置继承上面的log，所以如果两处都配置了a1或a2则会打印两此
log4j.logger.com.zjut.study.log = ERROR,a1,a2
